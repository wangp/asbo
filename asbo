#!/bin/zsh -e

readonly REPO=${REPO:-/var/lib/sbopkg/SBo/14.0}
readonly CACHEDIR=${CACHEDIR:-/tmp/sbo/cache}
readonly STAGEDIR=${STAGEDIR:-/tmp/sbo/stage}
readonly SLACKBUILD_SHELL=/bin/bash
readonly FAKEROOT=/usr/bin/fakeroot

#-----------------------------------------------------------------------------#

debug() {
    # print "DEBUG: $@" 1>&2
}

warn() {
    print "Warning: $@" 1>&2
}

die() {
    print "Error: $@" 1>&2
    exit 1
}

#-----------------------------------------------------------------------------#

detect_arch() {
    case "$( uname -m )" in
        i?86) echo "x86" ;;
           *) echo $( uname -m ) ;;
    esac
}

readonly ARCH=${ARCH:-$(detect_arch)}

#-----------------------------------------------------------------------------#

find_pkg_dir() {
    local pkg pkg_dir
    pkg=$1
    pkg_dir=( $REPO/*/$pkg(N) )
    if [[ $#pkg_dir == 0 ]]
    then
        die "$pkg not found"
    fi
    print -- $pkg_dir[1]
}

#-----------------------------------------------------------------------------#

seen=()
queue=()

is_seen() {
    for x in $seen
    do
        if [[ $x == $1 ]]
        then
            return 0
        fi
    done
    return 1
}

in_queue() {
    for q in $queue
    do
        if [[ $q == $1 ]]
        then
            return 0
        fi
    done
    return 1
}

add_deps() {
    local pkg=$1
    local pkg_dir=$(find_pkg_dir $pkg)
    [[ -d $pkg_dir ]] || exit 1
    local info=$pkg_dir/$pkg.info
    . $info # XXX makes a mess

    seen+=$pkg
    debug "seen $pkg"
    local req
    for req in ${=REQUIRES}
    do
        if [[ $req == "%README%" ]]
        then
            continue
        fi
        if in_queue $req
        then
            debug "$req already queued"
            continue
        fi
        if is_seen $req
        then
            die "circular dependency detected: $req"
        fi
        add_deps $req
    done
    debug "$pkg queued"
    queue+=$pkg
}

#-----------------------------------------------------------------------------#

verify_file() {
    local md5=$1
    local fn=$2
    if [[ -f $fn ]]
    then
        local digest=$( md5sum $fn | cut -d' ' -f1 )
        if [[ $digest == $md5 ]]
        then
            debug "file exists and verified: $fn"
            return 0
        else
            warn "MD5 sum does not match: $fn"
        fi
    else
        debug "file does not exist: $fn"
    fi
    return 1
}

download_src() {
    local pkg=$1
    local pkg_dir=$(find_pkg_dir $pkg)
    local info=$pkg_dir/$pkg.info
    . $info # XXX makes a mess

    local md5s srcs
    if [[ $ARCH == x86_64 && -n $DOWNLOAD_x86_64 ]]
    then
        srcs=( ${=DOWNLOAD_x86_64} )
        md5s=( ${=MD5SUM_x86_64} )
    else
        srcs=( ${=DOWNLOAD} )
        md5s=( ${=MD5SUM} )
    fi

    local -a srcfns
    while (( $#md5s > 0 ))
    do
        local src=$srcs[1]
        local md5=$md5s[1]
        local srcfn=${src:t}
        shift srcs
        shift md5s
        if ! verify_file $md5 $srcfn
        then
            debug "need to download: $srcfn"
            rm -f $srcfn
            if ! wget $src
            then
                die "failed to download $src"
            fi
            if ! verify_file $md5 $srcfn
            then
                die "MD5 sum does not match: $srcfn"
            fi
        fi
        srcfns+=$srcfn
    done

    if (( $#dls > 0 ))
    then
        die "list length mismatch"
    fi

    print -l -- $srcfns
}

#-----------------------------------------------------------------------------#

maybe_fakeroot() {
    if [[ $UID != 0 && -x $FAKEROOT ]]
    then
        debug "running $FAKEROOT $@ in $PWD"
        command $FAKEROOT "$@"
        return $?
    else
        debug "running $@"
        command "$@"
        return $?
    fi
}

build() {
    local -r pkg=$1
    local -r pkg_dir=$(find_pkg_dir $pkg)
    local -r stagedir=$STAGEDIR/$pkg
    shift 1

    rm -rf $stagedir
    mkdir -p $stagedir
    cp -r $pkg_dir/* $stagedir
    local fn
    for fn in "$@"
    do
        ln -s $CACHEDIR/$fn $stagedir
    done

    cd $stagedir
    if ! maybe_fakeroot $SLACKBUILD_SHELL $pkg.SlackBuild
    then
        die "error building $pkg"
    fi
}

#-----------------------------------------------------------------------------#

if [[ -z $1 ]]
then
    die "no top-level package specified"
fi

add_deps $1

mkdir -p $CACHEDIR
mkdir -p $STAGEDIR

for pkg in $queue
do
    cd $CACHEDIR
    local -a srcfns
    srcfns=($( download_src $pkg ))

    build $pkg $srcfns
done

#-----------------------------------------------------------------------------#
# vim: set sts=4 sw=4 et:
